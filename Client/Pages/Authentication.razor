@page "/authentication/{action}"
@using System.Collections.Specialized
@inject NavigationManager NavigationManager
@inject HttpClient client
@inject IJSRuntime JsRuntime
@inject IState state

@code {
    [Parameter]
    public string Action { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (Action == "login")
        {
            var baseAddress = client.BaseAddress.ToString();

            var queryParams = new FormUrlEncodedContent(new Dictionary<string, string>()
            {
                {"redirect_uri", $"{baseAddress}api/auth/authorize"},
                {"return_uri", $"{NavigationManager.BaseUri}authentication/authorized"}
            });

            var uri = new Uri($"{baseAddress}api/auth/login?{await queryParams.ReadAsStringAsync()}");
            NavigationManager.NavigateTo(uri.ToString(), true);
        } 
        else if (Action == "authorized")
        {
            await JsRuntime.InvokeVoidAsync("InteropFunctions.SetAuthenticated");
            await JsRuntime.InvokeVoidAsync("InteropFunctions.CloseWindow");
        }
    }
}