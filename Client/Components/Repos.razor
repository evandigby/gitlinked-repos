@inject HttpClient client
@inject IState state

@if (!closed)
{
	<Button OnClick="CloseSelection">Close Repo Selection</Button>
	<Combobox ItemsAsync="@GetRepos" @bind-SelectedItem=selectedRepo ItemToText="r => r.Name">
		<ItemTemplate>
			@($"{context.Name}")
		</ItemTemplate>
	</Combobox>

	@if (selectedRepo != null)
	{
		<RepoView Repository="selectedRepo" />
		<Button OnClick="AddRepo">Add Repo</Button>
	}
}

@foreach (var repo in state.SelectedRepositories)
{
	<RepoView Repository="repo" />
}

@code {
	private Repo selectedRepo;
	private bool closed;

	protected override void OnInitialized()
    {
        state.OnChange += StateHasChanged;
    }

	private void CloseSelection(MouseEventArgs args)
	{
		closed = true;
		StateHasChanged();
	}

	private void AddRepo(MouseEventArgs args)
	{
		if (selectedRepo == null)
			return;

		state.AddRepository(selectedRepo);
	}

	private async Task<ICollection<Repo>> GetRepos()
	{
		if (state.RepositoriesStale)
		{
			if (state.IsAuthenticated)
			{
				state.Repositories = await client.GetFromJsonAsync<IEnumerable<Repo>>("api/github/repos");
			}
			else
			{
				state.Repositories = Enumerable.Empty<Repo>();
			}
			state.RepositoriesStale = false;
		}

		return state.Repositories.ToList();
	}

}
